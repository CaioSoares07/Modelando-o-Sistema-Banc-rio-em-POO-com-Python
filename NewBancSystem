 import datetime

# ----------------------------------------------------
# 1. Interface/Classe Abstrata: Transacao
# ----------------------------------------------------
class Transacao:
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        """
        Método abstrato para registrar a transação em uma conta.
        Deve ser implementado pelas classes filhas.
        """
        raise NotImplementedError("O método 'registrar' deve ser implementado pelas subclasses.")

# ----------------------------------------------------
# 2. Classes de Transação Concretas
# ----------------------------------------------------
class Deposito(Transacao):
    def __init__(self, valor):
        if valor <= 0:
            raise ValueError("O valor do depósito deve ser positivo.")
        super().__init__(valor)

    def registrar(self, conta):
        if conta.depositar(self.valor):
            # O histórico será atualizado dentro do método depositar da Conta
            return True
        return False

class Saque(Transacao):
    def __init__(self, valor):
        if valor <= 0:
            raise ValueError("O valor do saque deve ser positivo.")
        super().__init__(valor)

    def registrar(self, conta):
        if conta.sacar(self.valor):
            # O histórico será atualizado dentro do método sacar da Conta
            return True
        return False

# ----------------------------------------------------
# 3. Historico
# ----------------------------------------------------
class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        timestamp = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        self._transacoes.append({
            "tipo": type(transacao).__name__,
            "valor": transacao.valor,
            "data": timestamp,
        })
        print(f"[{timestamp}] Transação '{type(transacao).__name__}' de R${transacao.valor:.2f} registrada no histórico.")

# ----------------------------------------------------
# 4. Conta
# ----------------------------------------------------
class Conta:
    def __init__(self, cliente, numero, agencia="0001"):
        if not isinstance(cliente, Cliente):
            raise TypeError("O cliente deve ser uma instância da classe Cliente.")
        if not isinstance(numero, int) or numero <= 0:
            raise ValueError("O número da conta deve ser um inteiro positivo.")

        self._saldo = 0.0
        self._numero = numero
        self._agencia = agencia
        self._cliente = cliente
        self._historico = Historico()

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        if valor <= 0:
            print("❌ Operação falhou! O valor do saque deve ser positivo.")
            return False
        if valor > self.saldo:
            print("❌ Operação falhou! Você não tem saldo suficiente.")
            return False

        self._saldo -= valor
        self.historico.adicionar_transacao(Saque(valor)) # Adiciona ao histórico
        print(f"✅ Saque de R${valor:.2f} realizado com sucesso.")
        return True

    def depositar(self, valor):
        if valor <= 0:
            print("❌ Operação falhou! O valor do depósito deve ser positivo.")
            return False

        self._saldo += valor
        self.historico.adicionar_transacao(Deposito(valor)) # Adiciona ao histórico
        print(f"✅ Depósito de R${valor:.2f} realizado com sucesso.")
        return True

    def __str__(self):
        return (f"Conta:\n"
                f"  Agência: {self.agencia}\n"
                f"  Número: {self.numero}\n"
                f"  Cliente: {self.cliente.nome}\n"
                f"  Saldo: R${self.saldo:.2f}")

# ----------------------------------------------------
# 5. ContaCorrente (Herda de Conta)
# ----------------------------------------------------
class ContaCorrente(Conta):
    def __init__(self, cliente, numero, limite=500.0, limite_saques=3):
        super().__init__(cliente, numero)
        if limite <= 0:
            raise ValueError("O limite deve ser um valor positivo.")
        if limite_saques <= 0:
            raise ValueError("O limite de saques deve ser um inteiro positivo.")

        self._limite = limite
        self._limite_saques = limite_saques
        self._saques_realizados_hoje = 0 # Para controlar o limite diário

    @property
    def limite(self):
        return self._limite

    @property
    def limite_saques(self):
        return self._limite_saques

    def sacar(self, valor):
        if self._saques_realizados_hoje >= self._limite_saques:
            print("❌ Operação falhou! Limite de saques diários excedido.")
            return False
        if valor > (self.saldo + self.limite):
            print(f"❌ Operação falhou! Saldo mais limite de R${self.limite:.2f} insuficiente.")
            return False

        # Chama o método sacar da classe pai (Conta)
        if super().sacar(valor):
            self._saques_realizados_hoje += 1
            return True
        return False

    def resetar_saques_diarios(self):
        """Método para resetar o contador de saques diários (simulando virada de dia)."""
        self._saques_realizados_hoje = 0
        print("Contador de saques diários resetado.")

    def __str__(self):
        return (f"{super().__str__()}\n"
                f"  Limite: R${self.limite:.2f}\n"
                f"  Saques Restantes Hoje: {self.limite_saques - self._saques_realizados_hoje}")

# ----------------------------------------------------
# 6. Cliente
# ----------------------------------------------------
class Cliente:
    def __init__(self, endereco):
        self._endereco = endereco
        self._contas = []

    @property
    def endereco(self):
        return self._endereco

    @property
    def contas(self):
        return self._contas

    def realizar_transacao(self, conta, transacao):
        if not isinstance(conta, Conta):
            raise TypeError("A conta deve ser uma instância da classe Conta.")
        if not isinstance(transacao, Transacao):
            raise TypeError("A transação deve ser uma instância de uma subclasse de Transacao.")

        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        if not isinstance(conta, Conta):
            raise TypeError("A conta deve ser uma instância da classe Conta.")
        self._contas.append(conta)
        print(f"Conta {conta.numero} adicionada ao cliente.")

# ----------------------------------------------------
# 7. PessoaFisica (Herda de Cliente)
# ----------------------------------------------------
class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        if not isinstance(nome, str) or not nome.strip():
            raise ValueError("O nome não pode ser vazio.")
        if not isinstance(data_nascimento, datetime.date):
            raise TypeError("A data de nascimento deve ser um objeto datetime.date.")
        if not isinstance(cpf, str) or not cpf.strip():
            raise ValueError("O CPF não pode ser vazio.")

        self._nome = nome
        self._data_nascimento = data_nascimento
        self._cpf = cpf

    @property
    def nome(self):
        return self._nome

    @property
    def data_nascimento(self):
        return self._data_nascimento

    @property
    def cpf(self):
        return self._cpf

    def __str__(self):
        return (f"Cliente:\n"
                f"  Nome: {self.nome}\n"
                f"  CPF: {self.cpf}\n"
                f"  Data Nasc.: {self.data_nascimento.strftime('%d/%m/%Y')}\n"
                f"  Endereço: {self.endereco}")

# ====================================================
# EXEMPLO DE USO DO SISTEMA BANCÁRIO
# ====================================================

if __name__ == "__main__":
    print("--- INICIANDO SIMULAÇÃO BANCÁRIA ---")

    # 1. Criar clientes
    cliente1 = PessoaFisica(nome="Maria Silva", data_nascimento=datetime.date(1990, 5, 15),
                            cpf="123.456.789-00", endereco="Rua A, 123 - Cidade X - SP")
    cliente2 = PessoaFisica(nome="João Souza", data_nascimento=datetime.date(1985, 1, 20),
                            cpf="009.876.543-21", endereco="Av. B, 456 - Cidade Y - RJ")

    print("\n--- Clientes Criados ---")
    print(cliente1)
    print("-" * 20)
    print(cliente2)

    # 2. Criar contas para os clientes
    conta1_cliente1 = ContaCorrente(cliente=cliente1, numero=1001, limite=1000.0, limite_saques=2)
    conta2_cliente1 = Conta(cliente=cliente1, numero=1002) # Uma conta poupança simples
    conta1_cliente2 = ContaCorrente(cliente=cliente2, numero=2001, limite=800.0, limite_saques=3)

    cliente1.adicionar_conta(conta1_cliente1)
    cliente1.adicionar_conta(conta2_cliente1)
    cliente2.adicionar_conta(conta1_cliente2)

    print("\n--- Contas Criadas ---")
    print(conta1_cliente1)
    print("-" * 20)
    print(conta2_cliente1)
    print("-" * 20)
    print(conta1_cliente2)

    # 3. Realizar operações
    print("\n--- Realizando Operações na Conta 1001 (Maria) ---")
    deposito_maria = Deposito(500.00)
    cliente1.realizar_transacao(conta1_cliente1, deposito_maria)
    print(f"Saldo atual da Conta 1001: R${conta1_cliente1.saldo:.2f}")

    saque_maria1 = Saque(200.00)
    cliente1.realizar_transacao(conta1_cliente1, saque_maria1)
    print(f"Saldo atual da Conta 1001: R${conta1_cliente1.saldo:.2f}")

    saque_maria2 = Saque(400.00) # Vai usar o limite
    cliente1.realizar_transacao(conta1_cliente1, saque_maria2)
    print(f"Saldo atual da Conta 1001: R${conta1_cliente1.saldo:.2f}")

    saque_maria3 = Saque(100.00) # Excede limite de saques
    cliente1.realizar_transacao(conta1_cliente1, saque_maria3)
    print(f"Saldo atual da Conta 1001: R${conta1_cliente1.saldo:.2f}")

    print("\n--- Realizando Operações na Conta 1002 (Maria - Poupança) ---")
    cliente1.realizar_transacao(conta2_cliente1, Deposito(100.0))
    print(f"Saldo atual da Conta 1002: R${conta2_cliente1.saldo:.2f}")

    cliente1.realizar_transacao(conta2_cliente1, Saque(50.0))
    print(f"Saldo atual da Conta 1002: R${conta2_cliente1.saldo:.2f}")

    print("\n--- Realizando Operações na Conta 2001 (João) ---")
    cliente2.realizar_transacao(conta1_cliente2, Deposito(1200.0))
    print(f"Saldo atual da Conta 2001: R${conta1_cliente2.saldo:.2f}")

    cliente2.realizar_transacao(conta1_cliente2, Saque(1500.0)) # Saque grande
    print(f"Saldo atual da Conta 2001: R${conta1_cliente2.saldo:.2f}")

    # 4. Exibir históricos
    print("\n--- Histórico da Conta 1001 (Maria) ---")
    for transacao in conta1_cliente1.historico.transacoes:
        print(f"- {transacao['data']} | {transacao['tipo']}: R${transacao['valor']:.2f}")

    print("\n--- Histórico da Conta 2001 (João) ---")
    for transacao in conta1_cliente2.historico.transacoes:
        print(f"- {transacao['data']} | {transacao['tipo']}: R${transacao['valor']:.2f}")

    # Resetar saques diários
    print("\n--- Resetando Saques Diários (Simulação de novo dia) ---")
    conta1_cliente1.resetar_saques_diarios()
    cliente1.realizar_transacao(conta1_cliente1, Saque(50.0)) # Agora pode sacar novamente
    print(f"Saldo atual da Conta 1001: R${conta1_cliente1.saldo:.2f}")
    print(f"Saques restantes hoje (Conta 1001): {conta1_cliente1.limite_saques - conta1_cliente1._saques_realizados_hoje}")

    print("\n--- FIM DA SIMULAÇÃO ---")
